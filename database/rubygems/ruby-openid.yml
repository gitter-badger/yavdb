---
- id: rubyadvisory:rubygems:ruby-openid:CVE-2019-11027
  title: ruby-openid SSRF via claimed_id request
  description: |
    Ruby OpenID (aka ruby-openid) through 2.8.0 has a remotely exploitable
    flaw. This library is used by Rails web applications to integrate with OpenID Providers.
    Severity can range from medium to critical, depending on how a web application developer
    chose to employ the ruby-openid library. Developers who based their OpenID integration
    heavily on the "example app" provided by the project are at highest risk.
  affected_package: ruby-openid
  patched_versions:
  - ">= 2.9.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2019-11027
  cvss_v3_score: 9.8
  disclosed_date: 2019-06-13
  created_date: 2019-06-13
  last_modified_date: 2019-06-13
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/openid/ruby-openid/issues/122
- id: snykio:rubygems:ruby-openid:449661
  title: Server Side Request Forgery (SSRF)
  description: |
    [ruby-openid][1] is a library for consuming and serving OpenID
    identities.

    Affected versions of this package are vulnerable to Server Side Request
    Forgery (SSRF) via the Yadis consumer discovery functionality provided
    by the gem. A lack of verification can lead to a forged assertion
    request being manipulated to the value of the `claimed_id` URL parameter
    which can be exploited with SSRF attacks. Developers who based their
    OpenID integration heavily on the \"example app\" provided by the
    project are at highest risk.

    For application developers, mitigations for affected apps exist:

    * Disable Yadis discovery if not needed
    * If Yadis discovery is required, or cannot be disabled, add your own
      strict checks against the value of the claimed\_id URL parameter at
      the very beginning of OpenID 2.0 assertion processing



    [1]: https://github.com/openid/ruby-openid
  affected_package: ruby-openid
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2019-11027
  cwe:
  - CWE-918
  disclosed_date: 2019-06-10
  created_date: 2019-08-29
  last_modified_date: 2019-08-29
  credit:
  - setenforce1
  references:
  - https://github.com/openid/ruby-openid/issues/122#issuecomment-520304211
  - https://marc.info/?l=openid-security&m=155154717027534&w=2
  source_url: https://snyk.io/vuln/SNYK-RUBY-RUBYOPENID-449661
- id: snykio:rubygems:ruby-openid:536103
  title: XML External Entity (XXE) Injection
  description: |+
    [ruby-openid][1] is a library for consuming and serving OpenID
    identities.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. It allows remote OpenID providers to cause a denial of
    service (CPU consumption) via (1) a large XRDS document or (2) an XML
    Entity Expansion (XEE) attack.



    [1]: https://github.com/openid/ruby-openid
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: ruby-openid
  vulnerable_versions:
  - "<2.2.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-1812
  cwe:
  - CWE-399
  disclosed_date: 2013-12-12
  created_date: 2019-11-29
  last_modified_date: 2019-11-29
  credit:
  - Unknown
  references:
  - https://github.com/openid/ruby-openid/blob/master/CHANGELOG.md
  - https://github.com/openid/ruby-openid/commit/a3693cef06049563f5b4e4824f4d3211288508ed
  - https://github.com/openid/ruby-openid/pull/43
  source_url: https://snyk.io/vuln/SNYK-RUBY-RUBYOPENID-536103
