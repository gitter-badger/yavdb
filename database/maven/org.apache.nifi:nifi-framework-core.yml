---
- id: snykio:maven:org.apache.nifi:nifi-framework-core:31619
  title: Deserialization of Untrusted Data
  description: |
    [Apache NiFi][1] is a system to process and distribute data.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data.

    Any authenticated user (valid client certificate but without ACL
    permissions) could upload a template which contained malicious code and
    caused a denial of service via Java deserialization attack. The fix to
    properly handle Java deserialization was applied on the Apache NiFi
    1.4.0 release. Users running a prior 1.x release should upgrade to the
    appropriate release.



    [1]: https://nifi.apache.org/
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: org.apache.nifi:nifi-framework-core
  vulnerable_versions:
  - "< 1.4.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-15703
  cwe:
  - CWE-611
  disclosed_date: 2017-10-02
  created_date: 2018-02-06
  last_modified_date: 2018-02-06
  credit:
  - Andy LoPresto
  references:
  - https://github.com/apache/nifi/pull/2134/commits/91ff58d038d3afe6a6c1aa13226a2c3050612938
  - https://issues.apache.org/jira/browse/NIFI-4357
  - https://nifi.apache.org/security.html#CVE-2017-15703
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-31619
- id: snykio:maven:org.apache.nifi:nifi-framework-core:31641
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.nifi:nifi-framework-core`][1] is a system to process and
    distribute data.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). A deadlock may occur during while updating the version of
    PostGres. The update process will obtain write lock, and if at the same
    time, a Processor is obtaining a Controller Service, it will obtain a
    Read Lock causing the deadlock.



    [1]: https://nifi.apache.org
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.nifi:nifi-framework-core
  vulnerable_versions:
  - "< 1.5.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-400
  disclosed_date: 2017-12-29
  created_date: 2018-03-06
  last_modified_date: 2018-03-06
  credit:
  - Unknown
  references:
  - https://github.com/apache/nifi/commit/0127b02617530491a1a55aa72395cee583083956
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-31641
- id: snykio:maven:org.apache.nifi:nifi-framework-core:548593
  title: Information Exposure
  description: |
    [org.apache.nifi:nifi-framework-core][1] is a system to process and
    distribute data.

    Affected versions of this package are vulnerable to Information
    Exposure. The flow fingerprint factory generated flow fingerprints which
    included sensitive property descriptor values. In the event a node
    attempted to join a cluster and the cluster flow was not inheritable,
    the flow fingerprint of both the cluster and local flow was printed,
    potentially containing sensitive values in plaintext.



    [1]: https://nifi.apache.org
  affected_package: org.apache.nifi:nifi-framework-core
  vulnerable_versions:
  - "< 1.11.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2020-1942
  cwe:
  - CWE-200
  disclosed_date: 2020-02-11
  created_date: 2020-02-12
  last_modified_date: 2020-02-12
  credit:
  - Andy LoPresto
  references:
  - https://github.com/apache/nifi/pull/4028
  - https://nifi.apache.org/security.html#CVE-2020-1942
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-548593
