---
- id: ossindex:maven:commons-beanutils:commons-beanutils:359770
  title: "[CVE-2014-0114]  Improper Input Validation"
  description: Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar
    in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils
    through 1.9.2, does not suppress the class property, which allows remote attackers
    to "manipulate" the ClassLoader and execute arbitrary code via the class parameter,
    as demonstrated by the passing of this parameter to the getClass method of the
    ActionForm object in Struts 1.
  affected_package: commons-beanutils:commons-beanutils
  vulnerable_versions:
  - "<=1.9.2"
  package_manager: maven
  cve:
  - CVE-2014-0114
  disclosed_date: 2014-04-30
  created_date: 2014-04-30
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://advisories.mageia.org/MGASA-2014-0219.html
  - http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.2/RELEASE-NOTES.txt
  - http://lists.fedoraproject.org/pipermail/package-announce/2014-August/136958.html
  - http://marc.info/?l=bugtraq&m=140119284401582&w=2
  - http://marc.info/?l=bugtraq&m=140801096002766&w=2
  - http://marc.info/?l=bugtraq&m=141451023707502&w=2
  - http://openwall.com/lists/oss-security/2014/06/15/10
  - http://openwall.com/lists/oss-security/2014/07/08/1
  - http://packetstormsecurity.com/files/131271/VMware-Security-Advisory-2015-0003.html
  - http://seclists.org/fulldisclosure/2014/Dec/23
  - http://seclists.org/fulldisclosure/2015/Apr/5
  - http://secunia.com/advisories/57477
  - http://secunia.com/advisories/58710
  - http://secunia.com/advisories/58851
  - http://secunia.com/advisories/58947
  - http://secunia.com/advisories/59014
  - http://secunia.com/advisories/59118
  - http://secunia.com/advisories/59228
  - http://secunia.com/advisories/59245
  - http://secunia.com/advisories/59246
  - http://secunia.com/advisories/59430
  - http://secunia.com/advisories/59464
  - http://secunia.com/advisories/59479
  - http://secunia.com/advisories/59480
  - http://secunia.com/advisories/59704
  - http://secunia.com/advisories/59718
  - http://secunia.com/advisories/60177
  - http://secunia.com/advisories/60703
  - http://www-01.ibm.com/support/docview.wss?uid=swg21674128
  - http://www-01.ibm.com/support/docview.wss?uid=swg21674812
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675266
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675387
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675689
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675898
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675972
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676091
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676110
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676303
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676375
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676931
  - http://www-01.ibm.com/support/docview.wss?uid=swg21677110
  - http://www-01.ibm.com/support/docview.wss?uid=swg27042296
  - http://www.debian.org/security/2014/dsa-2940
  - http://www.ibm.com/support/docview.wss?uid=swg21675496
  - http://www.mandriva.com/security/advisories?name=MDVSA-2014:095
  - http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html
  - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html
  - http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html
  - http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html
  - http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html
  - http://www.securityfocus.com/archive/1/archive/1/534161/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/535181/100/0/threaded
  - http://www.securityfocus.com/bid/67121
  - http://www.vmware.com/security/advisories/VMSA-2014-0008.html
  - http://www.vmware.com/security/advisories/VMSA-2014-0012.html
  - https://access.redhat.com/solutions/869353
  - https://bugzilla.redhat.com/show_bug.cgi?id=1091938
  - https://bugzilla.redhat.com/show_bug.cgi?id=1116665
  - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05324755
  - https://issues.apache.org/jira/browse/BEANUTILS-463
  - https://security.gentoo.org/glsa/201607-09
  - https://security.netapp.com/advisory/ntap-20140911-0001/
  source_url: https://ossindex.net/resource/package/7015420154/vulnerabilities
- id: snykio:maven:commons-beanutils:commons-beanutils:30077
  title: Arbitrary Code Execution
  description: |
    [commons-beanutils:commons-beanutils][1] provides an easy-to-use but
    flexible wrapper around reflection and introspection.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution. It does not suppress the class property, which allows remote
    attackers to manipulate the `ClassLoader` and execute arbitrary code via
    the class parameter, as demonstrated by the passing of this parameter to
    the `getClass` method of the `ActionForm` object in Struts 1.



    [1]: https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: commons-beanutils:commons-beanutils
  vulnerable_versions:
  - ">= 1.8.0 < 1.9.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0114
  cwe:
  - CWE-20
  disclosed_date: 2014-04-30
  created_date: 2014-05-01
  last_modified_date: 2014-05-01
  credit:
  - Alvaro Munoz
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Protect-your-Struts1-applications/ba-p/6463188#.U2J7xeaSxro
  - https://bugzilla.redhat.com/show_bug.cgi?id=1091938
  - https://exploit-db.com/exploits/41690
  - https://github.com/apache/commons-beanutils/pull/7/commits/2780a77600e6428b730e3a5197b7c5baf1c4cca0
  - https://issues.apache.org/jira/browse/BEANUTILS-463
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMMONSBEANUTILS-30077
- id: snykio:maven:commons-beanutils:commons-beanutils:460111
  title: Deserialization of Untrusted Data
  description: |
    [commons-beanutils:commons-beanutils][1] is a provides an easy-to-use
    but flexible wrapper around reflection and introspection.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. In Apache Commons Beanutils 1.9.2, a special
    `BeanIntrospector` class was added which allows suppressing the ability
    for an attacker to access the `classloader` via the `class` property
    available on all Java objects. This was not enabled by default and was
    therefore an incomplete fix for [CVE-2014-0114][2].



    [1]: https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSBEANUTILS-30077
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][2]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://cwe.mitre.org/data/definitions/502.html
    [2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: commons-beanutils:commons-beanutils
  vulnerable_versions:
  - ">= 1.9.2 < 1.9.4"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10086
  cwe:
  - CWE-502
  disclosed_date: 2019-08-20
  created_date: 2019-08-20
  last_modified_date: 2019-08-20
  credit:
  - Rob Tompkins
  references:
  - http://mail-archives.apache.org/mod_mbox/www-announce/201908.mbox/%3cC628798F-315D-4428-8CB1-4ED1ECC958E4@apache.org%3e
  - https://github.com/apache/commons-beanutils/commit/62e82ad92cf4818709d6044aaf257b73d42659a4
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMMONSBEANUTILS-460111
- id: victims:maven:commons-beanutils:commons-beanutils:2014-0114
  title: 'Commons BeanUtils: Class Loader manipulation via request parameters'
  description: 'Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar
    in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils
    through 1.9.2, does not suppress the class property, which allows remote attackers
    to "manipulate" the ClassLoader and execute arbitrary code via the class parameter,
    as demonstrated by the passing of this parameter to the getClass method of the
    ActionForm object in Struts 1.

'
  affected_package: commons-beanutils:commons-beanutils
  vulnerable_versions:
  - "<=1.9.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0114
  cvss_v2_score: 7.5
  credit:
  - Victims CVE Database
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Protect-your-Struts1-applications/ba-p/6463188#.U2J7xeaSxro
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0114
  - https://bugzilla.redhat.com/show_bug.cgi?id=1091938
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/0114.yaml
