---
- id: snykio:maven:com.itextpdf:kernel:541282
  title: Denial of Service (DoS)
  description: |+
    [com.itextpdf:kernel][1] is a software developer toolkit that allows
    users to integrate PDF functionalities within their applications,
    processes or products.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) through decompression bombs from a passed pdf stream.



    [1]: https://itextpdf.com/en/products/itext-7/itext-7-community
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: com.itextpdf:kernel
  vulnerable_versions:
  - "< 7.1.7"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-189
  disclosed_date: 2019-06-11
  created_date: 2020-01-09
  last_modified_date: 2020-01-09
  credit:
  - Unknown
  references:
  - https://github.com/itext/itext7-dotnet/commit/a7eb0f0338c5bdcd056cf95a9b7f2eda496c17e8
  - https://github.com/itext/itext7/commit/696df736f8c4c6385dae5c4eff22163d5eca29b6
  - https://github.com/itext/itextsharp/commit/533b325e39a759173105a45ab913e4274035a338
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMITEXTPDF-541282
- id: snykio:maven:com.itextpdf:kernel:73626
  title: XML External Entity (XXE) Injection
  description: |+
    [com.itextpdf:kernel][1] is a software developer toolkit that allows
    users to integrate PDF functionalities within their applications,
    processes or products.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. The XML parsers in iText before 5.5.12 and 7.x before
    7.0.3 do not disable external entities, which might allow remote
    attackers to conduct XML external entity (XXE) attacks via a crafted
    PDF.



    [1]: https://itextpdf.com/en/products/itext-7/itext-7-community
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: com.itextpdf:kernel
  vulnerable_versions:
  - ">= 7.0.0 < 7.0.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-9096
  cwe:
  - CWE-611
  disclosed_date: 2017-07-27
  created_date: 2017-11-20
  last_modified_date: 2017-11-20
  credit:
  - Unknown
  references:
  - https://github.com/itext/itext7-dotnet/commit/976884e47a265fb2114756ffacc04b913f9c4dcb
  - https://github.com/itext/itext7/commit/930a1c81f8ea4952df540f041befbfa2d6757838
  - https://github.com/itext/itextpdf/commit/ad38371c396ac5ffbfb28056809e8ffaa5a18ccd
  - https://github.com/itext/itextsharp/commit/72a8d567ce0b20c549669258145f8d4b19e0fa4e
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMITEXTPDF-73626
