---
- id: snykio:maven:com.puppycrawl.tools:checkstyle:173770
  title: XML External Entity (XXE) Injection
  description: |+
    [com.puppycrawl.tools:checkstyle][1] is a development tool to help
    programmers write Java code that adheres to a coding standard.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection because it loads external DTDs by default.



    [1]: https://mvnrepository.com/artifact/com.puppycrawl.tools/checkstyle
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: com.puppycrawl.tools:checkstyle
  vulnerable_versions:
  - "< 8.18"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-9658
  cwe:
  - CWE-611
  disclosed_date: 2019-03-11
  created_date: 2019-03-11
  last_modified_date: 2019-03-11
  credit:
  - Roman Ivanov
  references:
  - https://checkstyle.org/releasenotes.html#Release_8.18
  - https://github.com/checkstyle/checkstyle/issues/6474
  - https://github.com/checkstyle/checkstyle/issues/6478
  - https://github.com/checkstyle/checkstyle/pull/6476
  - https://github.com/checkstyle/checkstyle/pull/6476/commits/f796c5053b6f275db9a3907fa24207d233974e29
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMPUPPYCRAWLTOOLS-173770
- id: snykio:maven:com.puppycrawl.tools:checkstyle:543266
  title: XML External Entity (XXE) Injection
  description: |+
    [com.puppycrawl.tools:checkstyle][1] is a development tool to help
    programmers write Java code that adheres to a coding standard.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection due to an incomplete fix for *CVE-2019-9658* checkstyle
    was still vulnerable to XML External Entity (XXE) Injection.



    [1]: https://mvnrepository.com/artifact/com.puppycrawl.tools/checkstyle
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: com.puppycrawl.tools:checkstyle
  vulnerable_versions:
  - "< 8.29"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10782
  cwe:
  - CWE-611
  disclosed_date: 2020-01-25
  created_date: 2020-01-27
  last_modified_date: 2020-01-27
  credit:
  - Jonathan Leitschuh and Snyk Security Team
  references:
  - https://checkstyle.org/releasenotes.html#Release_8.29
  - https://github.com/checkstyle/checkstyle/issues/7468
  - https://github.com/checkstyle/checkstyle/security/advisories/GHSA-763g-fqq7-48wg
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMPUPPYCRAWLTOOLS-543266
