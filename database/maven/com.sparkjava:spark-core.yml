---
- id: ossindex:maven:com.sparkjava:spark-core:8400742945
  title: '[CVE-2016-9177]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Directory traversal vulnerability in Spark 2.5 allows remote attackers
    to read arbitrary files via a .. (dot dot) in the URI.
  affected_package: com.sparkjava:spark-core
  vulnerable_versions:
  - '2.5'
  package_manager: maven
  cve:
  - CVE-2016-9177
  disclosed_date: 2016-11-04
  created_date: 2016-11-04
  last_modified_date: 2017-02-02
  credit:
  - OSSIndex
  references:
  - http://seclists.org/fulldisclosure/2016/Nov/13
  - http://www.securityfocus.com/bid/94218
  - https://access.redhat.com/errata/RHSA-2017:0868
  - https://github.com/perwendel/spark/issues/700
  source_url: https://ossindex.net/resource/package/7085803999/vulnerabilities
- id: snykio:maven:com.sparkjava:spark-core:30379
  title: Directory Traversal
  description: |
    [`com.sparkjava:spark-core`][1] Directory traversal vulnerability in
    Spark 2.5 allows remote attackers to read arbitrary files via a .. (dot
    dot) in the URI.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spark-core%22
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: com.sparkjava:spark-core
  vulnerable_versions:
  - "< 2.5.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-9177
  cwe:
  - CWE-22
  disclosed_date: 2016-11-04
  created_date: 2016-11-07
  last_modified_date: 2016-11-07
  credit:
  - aj
  references:
  - http://seclists.org/fulldisclosure/2016/Nov/13
  - https://github.com/perwendel/spark/issues/700
  - https://github.com/perwendel/spark/pull/701
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9177
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMSPARKJAVA-30379
- id: snykio:maven:com.sparkjava:spark-core:31646
  title: Directory Traversal
  description: |
    [com.sparkjava:spark-core][1] is a web framework for java.

    Affected versions of this package are vulnerable to Directory Traversal.
    A remote attacker could use this flaw to read arbitrary files that are
    accessible to the user running the process.



    [1]: https://github.com/perwendel/spark
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: com.sparkjava:spark-core
  vulnerable_versions:
  - "< 2.7.2"
  severity: high
  package_manager: maven
  cwe:
  - CWE-22
  disclosed_date: 2018-02-24
  created_date: 2018-03-08
  last_modified_date: 2018-03-08
  credit:
  - Orange Tsai
  references:
  - https://github.com/perwendel/spark/commit/030e9d00125cbd1ad759668f85488aba1019c668
  - https://github.com/perwendel/spark/issues/981
  - https://github.com/perwendel/spark/pull/987
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMSPARKJAVA-31646
- id: snykio:maven:com.sparkjava:spark-core:461007
  title: Information Exposure
  description: |
    [com.sparkjava:spark-core][1] is a web framework for java.

    Affected versions of this package are vulnerable to Information
    Exposure. A remote attacker can read unintended static files via various
    epresentations of absolute or relative pathnames.

    **NOTE:** this product is unrelated to Ignite Realtime Spark.



    [1]: https://github.com/perwendel/spark
  affected_package: com.sparkjava:spark-core
  vulnerable_versions:
  - "< 2.7.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-9159
  cwe:
  - CWE-200
  disclosed_date: 2018-02-25
  created_date: 2018-04-03
  last_modified_date: 2018-04-03
  credit:
  - Unknown
  references:
  - https://github.com/perwendel/spark/commit/a221a864db28eb736d36041df2fa6eb8839fc5cd
  - https://github.com/perwendel/spark/issues/981
  - https://nvd.nist.gov/vuln/detail/CVE-2018-9159
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMSPARKJAVA-461007
