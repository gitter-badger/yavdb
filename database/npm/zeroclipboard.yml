---
- id: ossindex:npm:zeroclipboard:353909
  title: '[CVE-2012-6550]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in ZeroClipboard before 1.1.4
    allows remote attackers to inject arbitrary web script or HTML via "the clipText
    returned from the flash object," a different vulnerability than CVE-2013-1808.
  affected_package: zeroclipboard
  vulnerable_versions:
  - "<1.1.4"
  package_manager: npm
  cve:
  - CVE-2012-6550
  disclosed_date: 2013-04-02
  created_date: 2013-04-02
  last_modified_date: 2017-05-16
  credit:
  - OSSIndex
  references:
  - http://seclists.org/fulldisclosure/2013/Feb/103
  - https://github.com/jonrohan/ZeroClipboard/blob/master/docs/releases.md#zeroclipboard-114
  - https://github.com/jonrohan/ZeroClipboard/commit/51b67b6d696f62aaf003210c08542588222c4913
  source_url: https://ossindex.net/resource/package/7014648925/vulnerabilities
- id: ossindex:npm:zeroclipboard:355532
  title: '[CVE-2013-1808]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: 'Cross-site scripting (XSS) vulnerability in ZeroClipboard.swf and
    ZeroClipboard10.swf in ZeroClipboard before 1.0.8, as used in em-shorty, RepRapCalculator,
    Fulcrum, Django, aCMS, and other products, allows remote attackers to inject arbitrary
    web script or HTML via the id parameter.  NOTE: this is might be the same vulnerability
    as CVE-2013-1463. If so, it is likely that CVE-2013-1463 will be REJECTed.'
  affected_package: zeroclipboard
  vulnerable_versions:
  - 1.0.5
  - 1.0.7
  package_manager: npm
  cve:
  - CVE-2013-1808
  disclosed_date: 2013-04-02
  created_date: 2013-04-02
  last_modified_date: 2017-05-16
  credit:
  - OSSIndex
  references:
  - http://seclists.org/fulldisclosure/2013/Apr/87
  - http://seclists.org/fulldisclosure/2013/Apr/88
  - http://seclists.org/fulldisclosure/2013/Feb/103
  - http://seclists.org/fulldisclosure/2013/Feb/109
  - http://seclists.org/fulldisclosure/2013/Mar/5
  - http://securityvulns.ru/docs29103.html
  - http://securityvulns.ru/docs29104.html
  - http://securityvulns.ru/docs29105.html
  - http://www.cloudbees.com/jenkins-advisory/jenkins-security-advisory-2013-05-02.cb
  - http://www.openwall.com/lists/oss-security/2013/03/03/3
  - http://www.openwall.com/lists/oss-security/2013/03/10/2
  - http://www.openwall.com/lists/oss-security/2013/03/25/1
  - http://www.openwall.com/lists/oss-security/2013/03/26/8
  - http://www.securityfocus.com/bid/58257
  - https://github.com/jonrohan/ZeroClipboard/blob/master/docs/releases.md#zeroclipboard-108
  - https://github.com/jonrohan/ZeroClipboard/commit/a0e02933f5f7ce5f364fbad36a005f0a349f0696
  source_url: https://ossindex.net/resource/package/7014648925/vulnerabilities
- id: ossindex:npm:zeroclipboard:361126
  title: '[CVE-2014-1869]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in ZeroClipboard.swf
    in ZeroClipboard before 1.3.2, as maintained by Jon Rohan and James M. Greene,
    allow remote attackers to inject arbitrary web script or HTML via vectors related
    to certain SWF query parameters (aka loaderInfo.parameters).
  affected_package: zeroclipboard
  vulnerable_versions:
  - 1.0.5
  - 1.0.7
  - 1.0.8
  - 1.1.0
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - 1.1.5
  - 1.1.6
  - 1.1.7
  - 1.2.0
  - 1.2.1
  - 1.2.2
  - 1.2.3
  - 1.3.0
  - 1.3.1
  package_manager: npm
  cve:
  - CVE-2014-1869
  disclosed_date: 2014-02-08
  created_date: 2014-02-08
  last_modified_date: 2017-05-16
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/56821
  - http://www.securityfocus.com/bid/65484
  - http://xforce.iss.net/xforce/xfdb/91085
  - https://access.redhat.com/errata/RHSA-2016:0070
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/91085
  - https://github.com/zeroclipboard/zeroclipboard/commit/2f9eb9750a433965572d047e24b0fc78fd1415ca
  - https://github.com/zeroclipboard/zeroclipboard/pull/335
  - https://github.com/zeroclipboard/zeroclipboard/releases/tag/v1.3.2
  - https://wiki.jenkins-ci.org/display/SECURITY/Jenkins%20Security%20Advisory%202014-10-01
  - https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2014-10-01
  source_url: https://ossindex.net/resource/package/7014648925/vulnerabilities
- id: ossindex:npm:zeroclipboard:8402731236
  title: Cross Site Scripting (XSS)
  description: An ID is not being escaped, resulting in a possible XSS vulnerability.
  affected_package: zeroclipboard
  vulnerable_versions:
  - "<1.0.7"
  package_manager: npm
  disclosed_date: 2017-03-31
  created_date: 2017-03-31
  last_modified_date: 2017-05-16
  credit:
  - OSSIndex
  references:
  - https://github.com/zeroclipboard/zeroclipboard/commit/21c1b56f783131d74b549b37587a24c45b5c7c6d
  - https://github.com/zeroclipboard/zeroclipboard/issues/2
  source_url: https://ossindex.net/resource/package/7014648925/vulnerabilities
- id: ossindex:npm:zeroclipboard:8402731237
  title: Possible Cross Site Scripting (XSS) in LoaderInfo parameters
  description: Allowing non "FlashVars" query parameters might provide a Cross Site
    Scripting attack vector.
  affected_package: zeroclipboard
  vulnerable_versions:
  - "<2.2.0"
  package_manager: npm
  disclosed_date: 2017-03-31
  created_date: 2017-03-31
  last_modified_date: 2017-05-16
  credit:
  - OSSIndex
  references:
  - https://github.com/zeroclipboard/zeroclipboard/commit/d1a504f1b1ca2b20c80355e467058e27f25ae0f8
  - https://github.com/zeroclipboard/zeroclipboard/issues/336
  - https://github.com/zeroclipboard/zeroclipboard/pull/521
  source_url: https://ossindex.net/resource/package/7014648925/vulnerabilities
- id: ossindex:npm:zeroclipboard:8402731349
  title: Possible Cross Site Scripting (XSS)
  description: Some additional XSS hardening has been added to the SWF by verifying
    that `ExternalInterface.objectID` matches the expected value.
  affected_package: zeroclipboard
  vulnerable_versions:
  - "<2.0.0-beta.2"
  package_manager: npm
  disclosed_date: 2017-03-31
  created_date: 2017-03-31
  last_modified_date: 2017-06-26
  credit:
  - OSSIndex
  references:
  - https://github.com/jonrohan/ZeroClipboard/issues/391
  - https://github.com/zeroclipboard/zeroclipboard/commit/e7917aaa3f51894bee7a916b8063690dca43a585
  source_url: https://ossindex.net/resource/package/7014648925/vulnerabilities
- id: ossindex:npm:zeroclipboard:8402731350
  title: "[Duplicate] Filtering query params out of LoaderInfo parameters"
  description: See https://ossindex.net/resource/vulnerability/8402731237
  affected_package: zeroclipboard
  vulnerable_versions:
  - "*"
  package_manager: npm
  disclosed_date: 2017-03-31
  created_date: 2017-03-31
  last_modified_date: 2017-06-26
  credit:
  - OSSIndex
  references:
  - https://github.com/jonrohan/ZeroClipboard/issues/336
  source_url: https://ossindex.net/resource/package/7014648925/vulnerabilities
- id: snykio:npm:zeroclipboard:20120528
  title: Cross-site Scripting (XSS)
  description: |+
    [zeroclipboard][1] provides an easy way to copy text to the clipboard
    using an invisible Adobe Flash movie and a JavaScript interface.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS)due to not escaping the clipText returned from the flash object.
    This allows remote attackers to inject arbitrary web script or HTML into
    the browser.



    [1]: https://www.npmjs.com/package/zeroclipboard
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zeroclipboard
  vulnerable_versions:
  - "<1.1.4"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2012-6550
  cwe:
  - CWE-79
  disclosed_date: 2012-05-27
  created_date: 2017-03-13
  last_modified_date: 2017-03-13
  credit:
  - Kingfo
  references:
  - http://seclists.org/fulldisclosure/2013/Feb/103
  - https://github.com/zeroclipboard/zeroclipboard/commit/51b67b6d696f62aaf003210c08542588222c4913
  - https://github.com/zeroclipboard/zeroclipboard/issues/14
  - https://github.com/zeroclipboard/zeroclipboard/pull/2
  - https://github.com/zeroclipboard/zeroclipboard/releases/tag/v1.1.4
  source_url: https://snyk.io/vuln/npm:zeroclipboard:20120528
- id: snykio:npm:zeroclipboard:20130104
  title: Cross-site Scripting (XSS)
  description: |+
    [zeroclipboard][1] provides an easy way to copy text to the clipboard
    using an invisible Adobe Flash movie and a JavaScript interface.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows remote attackers to inject arbitrary web script or HTML
    via the id parameter.



    [1]: https://www.npmjs.com/package/zeroclipboard
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zeroclipboard
  vulnerable_versions:
  - "<1.0.8"
  severity: low
  package_manager: npm
  cve:
  - CVE-2013-1808
  cwe:
  - CWE-79
  disclosed_date: 2013-01-04
  created_date: 2018-03-15
  last_modified_date: 2018-03-15
  credit:
  - Unknown
  references:
  - https://github.com/zeroclipboard/zeroclipboard/commit/a0e02933f5f7ce5f364fbad36a005f0a349f0696
  - https://nvd.nist.gov/vuln/detail/CVE-2013-1808
  - https://www.cloudbees.com/jenkins-security-advisory-2013-05-02
  source_url: https://snyk.io/vuln/npm:zeroclipboard:20130104
- id: snykio:npm:zeroclipboard:20140131
  title: Cross-site Scripting (XSS)
  description: |+
    [`zeroclipboard`][1] Affected versions of the package are vulnerable to
    Cross-site Scripting (XSS). This allows remote attackers to inject
    arbitrary web script or HTML via vectors related to certain SWF query
    parameters.



    [1]: https://www.npmjs.com/package/zeroclipboard
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: zeroclipboard
  vulnerable_versions:
  - ">=1.0.7 <1.3.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-1869
  cwe:
  - CWE-79
  disclosed_date: 2014-01-30
  created_date: 2017-03-13
  last_modified_date: 2017-03-13
  credit:
  - Masato Kinugawa
  references:
  - https://github.com/zeroclipboard/zeroclipboard/commit/2f9eb9750a433965572d047e24b0fc78fd1415ca
  - https://github.com/zeroclipboard/zeroclipboard/pull/335
  source_url: https://snyk.io/vuln/npm:zeroclipboard:20140131
