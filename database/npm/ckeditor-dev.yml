---
- id: ossindex:npm:ckeditor-dev:309875
  title: "[CVE-2005-0613] Unknown vulnerability in FCKeditor 2.0 RC2, when used with
    PHP-Nuke, allows remo..."
  description: Unknown vulnerability in FCKeditor 2.0 RC2, when used with PHP-Nuke,
    allows remote attackers to upload arbitrary files.
  affected_package: ckeditor-dev
  vulnerable_versions:
  - 2.0_rc2
  package_manager: npm
  cve:
  - CVE-2005-0613
  disclosed_date: 2005-02-28
  created_date: 2005-02-28
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/12676
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:314632
  title: "[CVE-2006-0658] Incomplete blacklist vulnerability in connector.php in FCKeditor
    2.0 and 2.2, as..."
  description: Incomplete blacklist vulnerability in connector.php in FCKeditor 2.0
    and 2.2, as used in products such as RunCMS, allows remote attackers to upload
    and execute arbitrary script files by giving the files specific extensions that
    are not listed in the Config[DeniedExtensions][File], such as .php.txt.
  affected_package: ckeditor-dev
  vulnerable_versions:
  - '2.0'
  - '2.2'
  package_manager: npm
  cve:
  - CVE-2006-0658
  disclosed_date: 2006-02-13
  created_date: 2006-02-13
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://retrogod.altervista.org/fckeditor_22_xpl.html
  - http://secunia.com/advisories/18767
  - http://www.milw0rm.com/exploits/3702
  - http://www.securityfocus.com/archive/1/424708
  - http://www.vupen.com/english/advisories/2006/0502
  - https://www.exploit-db.com/exploits/3702
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:314891
  title: "[CVE-2006-0921] Multiple directory traversal vulnerabilities in connector.php
    in FCKeditor 2.0 F..."
  description: Multiple directory traversal vulnerabilities in connector.php in FCKeditor
    2.0 FC, as used in products such as RunCMS, allow remote attackers to list and
    create arbitrary directories via a .. (dot dot) in the CurrentFolder parameter
    to (1) GetFoldersAndFiles and (2) CreateFolder.
  affected_package: ckeditor-dev
  vulnerable_versions:
  - 2.0_fc
  package_manager: npm
  cve:
  - CVE-2006-0921
  disclosed_date: 2006-02-28
  created_date: 2006-02-28
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://securityreason.com/securityalert/484
  - http://www.nsag.ru/vuln/952.html
  - http://www.securityfocus.com/archive/1/archive/1/425937/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/434559/30/4890/threaded
  - http://xforce.iss.net/xforce/xfdb/24878
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/24878
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:316467
  title: "[CVE-2006-2529] editor/filemanager/upload/php/upload.php in FCKeditor before
    2.3 Beta, when the ..."
  description: 'editor/filemanager/upload/php/upload.php in FCKeditor before 2.3 Beta,
    when the upload feature is enabled, does not verify the Type parameter, which
    allows remote attackers to upload arbitrary file types.  NOTE: It is not clear
    whether this is related to CVE-2006-0658.'
  affected_package: ckeditor-dev
  vulnerable_versions:
  - '2.2'
  package_manager: npm
  cve:
  - CVE-2006-2529
  disclosed_date: 2006-05-22
  created_date: 2006-05-22
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/20122
  - http://www.fckeditor.net/whatsnew/default.html
  - http://www.osvdb.org/25631
  - http://www.securityfocus.com/bid/18029
  - http://www.vupen.com/english/advisories/2006/1856
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:320764
  title: '[CVE-2006-6978]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: 'Cross-site scripting (XSS) vulnerability in the "Basic Toolbar Selection"
    in FCKEditor allows remote attackers to execute arbitrary JavaScript via the javascript:
    URI in the (1) href or (2) onmouseover attribute of the A HTML tag.'
  affected_package: ckeditor-dev
  vulnerable_versions:
  - "*"
  package_manager: npm
  cve:
  - CVE-2006-6978
  disclosed_date: 2007-02-08
  created_date: 2007-02-08
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.newffr.com/viewtopic.php?forum=26&topic=11683
  - http://www.securityfocus.com/archive/1/archive/1/434006/30/4980/threaded
  - http://xforce.iss.net/xforce/xfdb/26539
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:326038
  title: "[CVE-2007-5156] Incomplete blacklist vulnerability in editor/filemanager/upload/php/upload.php
    i..."
  description: Incomplete blacklist vulnerability in editor/filemanager/upload/php/upload.php
    in FCKeditor, as used in SiteX CMS 0.7.3.beta, La-Nai CMS, Syntax CMS, Cardinal
    Cms, and probably other products, allows remote attackers to upload and execute
    arbitrary PHP code via a file whose name contains ".php." and has an unknown extension,
    which is recognized as a .php file by the Apache HTTP server, a different vulnerability
    than CVE-2006-0658 and CVE-2006-2529.
  affected_package: ckeditor-dev
  vulnerable_versions:
  - "*"
  package_manager: npm
  cve:
  - CVE-2007-5156
  disclosed_date: 2007-10-01
  created_date: 2007-10-01
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://dev.fckeditor.net/changeset/973
  - http://dev.fckeditor.net/ticket/1325
  - http://downloads.securityfocus.com/vulnerabilities/exploits/30677.php
  - http://secunia.com/advisories/27123
  - http://secunia.com/advisories/27174
  - http://securityreason.com/securityalert/3182
  - http://sourceforge.net/forum/forum.php?forum_id=743930
  - http://sourceforge.net/project/shownotes.php?release_id=546000
  - http://www.milw0rm.com/exploits/5618
  - http://www.milw0rm.com/exploits/5688
  - http://www.securityfocus.com/archive/1/archive/1/480830/100/0/threaded
  - http://www.securityfocus.com/bid/29422
  - http://www.securityfocus.com/bid/30677
  - http://www.vupen.com/english/advisories/2007/3464
  - http://www.vupen.com/english/advisories/2007/3465
  - http://www.waraxe.us/advisory-57.html
  - http://xforce.iss.net/xforce/xfdb/42425
  - http://xforce.iss.net/xforce/xfdb/42733
  - http://xforce.iss.net/xforce/xfdb/44455
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/42425
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/42733
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/44455
  - https://www.exploit-db.com/exploits/5618
  - https://www.exploit-db.com/exploits/5688
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:333454
  title: '[CVE-2008-6178]  Improper Control of Generation of Code ("Code Injection")'
  description: 'Unrestricted file upload vulnerability in editor/filemanager/browser/default/connectors/php/connector.php
    in FCKeditor 2.2, as used in Falt4 CMS, Nuke ET, and other products, allows remote
    attackers to execute arbitrary code by creating a file with PHP sequences preceded
    by a ZIP header, uploading this file via a FileUpload action with the application/zip
    content type, and then accessing this file via a direct request to the file in
    UserFiles/File/, probably a related issue to CVE-2005-4094.  NOTE: some of these
    details are obtained from third party information.'
  affected_package: ckeditor-dev
  vulnerable_versions:
  - 2.0rc2
  - 2.0rc3
  - '2.2'
  - 2.3beta
  - 2.4.3
  package_manager: npm
  cve:
  - CVE-2008-6178
  disclosed_date: 2009-02-19
  created_date: 2009-02-19
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/33973
  - http://www.milw0rm.com/exploits/8060
  - http://www.securityfocus.com/bid/31812
  - http://www.vupen.com/english/advisories/2009/0447
  - http://xforce.iss.net/xforce/xfdb/48769
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/48769
  - https://www.exploit-db.com/exploits/8060
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:336744
  title: '[CVE-2009-2265]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Multiple directory traversal vulnerabilities in FCKeditor before 2.6.4.1
    allow remote attackers to create executable files in arbitrary directories via
    directory traversal sequences in the input to unspecified connector modules, as
    exploited in the wild for remote code execution in July 2009, related to the file
    browser and the editor/filemanager/connectors/ directory.
  affected_package: ckeditor-dev
  vulnerable_versions:
  - '2.0'
  - 2.0_fc
  - 2.0_rc2
  - 2.0rc2
  - 2.0rc3
  - '2.1'
  - 2.1.1
  - '2.2'
  - '2.3'
  - 2.3.1
  - 2.3.2
  - 2.3.3
  - '2.4'
  - 2.4.1
  - 2.4.2
  - 2.4.3
  - '2.5'
  - 2.5.1
  - '2.6'
  - 2.6.1
  - 2.6.2
  - 2.6.3
  - 2.6.4
  package_manager: npm
  cve:
  - CVE-2009-2265
  disclosed_date: 2009-07-05
  created_date: 2009-07-05
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://isc.sans.org/diary.html?storyid=6724
  - http://mail.zope.org/pipermail/zope-dev/2009-July/037195.html
  - http://secunia.com/advisories/35833
  - http://secunia.com/advisories/35909
  - http://sourceforge.net/project/shownotes.php?release_id=695430
  - http://www.debian.org/security/2009/dsa-1836
  - http://www.ocert.org/advisories/ocert-2009-007.html
  - http://www.securityfocus.com/archive/1/archive/1/504721/100/0/threaded
  - http://www.securitytracker.com/id?1022513
  - http://www.vupen.com/english/advisories/2009/1813
  - http://www.vupen.com/english/advisories/2009/1825
  - https://www.redhat.com/archives/fedora-package-announce/2009-July/msg00710.html
  - https://www.redhat.com/archives/fedora-package-announce/2009-July/msg00750.html
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:336800
  title: '[CVE-2009-2324]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in FCKeditor before
    2.6.4.1 allow remote attackers to inject arbitrary web script or HTML via components
    in the samples (aka _samples) directory.
  affected_package: ckeditor-dev
  vulnerable_versions:
  - '2.0'
  - 2.0_fc
  - 2.0_rc2
  - 2.0rc2
  - 2.0rc3
  - '2.1'
  - 2.1.1
  - '2.2'
  - '2.3'
  - 2.3.1
  - 2.3.2
  - 2.3.3
  - '2.4'
  - 2.4.1
  - 2.4.2
  - 2.4.3
  - '2.5'
  - 2.5.1
  - '2.6'
  - 2.6.1
  - 2.6.2
  - 2.6.3
  - 2.6.4
  package_manager: npm
  cve:
  - CVE-2009-2324
  disclosed_date: 2009-07-05
  created_date: 2009-07-05
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.ocert.org/advisories/ocert-2009-007.html
  - http://www.securityfocus.com/archive/1/archive/1/504721/100/0/threaded
  - http://www.securitytracker.com/id?1022513
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:350606
  title: '[CVE-2012-2066]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the FCKeditor module 6.x-2.x
    before 6.x-2.3 and the CKEditor module 6.x-1.x before 6.x-1.9 and 7.x-1.x before
    7.x-1.7 for Drupal allows remote authenticated users or remote attackers to inject
    arbitrary web script or HTML via unspecified vectors.
  affected_package: ckeditor-dev
  vulnerable_versions:
  - 6.x-1.0
  - 6.x-1.1
  - 6.x-1.2
  - 6.x-1.3
  - 6.x-1.4
  - 6.x-1.5
  - 6.x-1.6
  - 6.x-1.7
  - 6.x-1.x
  - 7.x-1.0
  - 7.x-1.1
  - 7.x-1.2
  - 7.x-1.3
  - 7.x-1.4
  - 7.x-1.5
  - 7.x-1.6
  - 7.x-1.x
  package_manager: npm
  cve:
  - CVE-2012-2066
  disclosed_date: 2012-09-05
  created_date: 2012-09-05
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://drupal.org/node/1482442
  - http://drupal.org/node/1482466
  - http://drupal.org/node/1482480
  - http://drupal.org/node/1482528
  - http://secunia.com/advisories/48435
  - http://www.openwall.com/lists/oss-security/2012/04/07/1
  - http://www.osvdb.org/80079
  - http://xforce.iss.net/xforce/xfdb/74036
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/74036
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:350607
  title: "[CVE-2012-2067] Unspecified vulnerability in the CKeditor module 6.x-2.x
    before 6.x-2.3 and the ..."
  description: 'Unspecified vulnerability in the CKeditor module 6.x-2.x before 6.x-2.3
    and the CKEditor module 6.x-1.x before 6.x-1.9 and 7.x-1.x before 7.x-1.7 for
    Drupal, when the core PHP module is enabled, allows remote authenticated users
    or remote attackers to execute arbitrary PHP code via the text parameter to a
    text filter.  NOTE: some of these details are obtained from third party information.'
  affected_package: ckeditor-dev
  vulnerable_versions:
  - 6.x-1.0
  - 6.x-1.1
  - 6.x-1.2
  - 6.x-1.3
  - 6.x-1.4
  - 6.x-1.5
  - 6.x-1.6
  - 6.x-1.7
  - 6.x-1.x
  - 7.x-1.0
  - 7.x-1.1
  - 7.x-1.2
  - 7.x-1.3
  - 7.x-1.4
  - 7.x-1.5
  - 7.x-1.6
  - 7.x-1.x
  package_manager: npm
  cve:
  - CVE-2012-2067
  disclosed_date: 2012-09-05
  created_date: 2012-09-05
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://drupal.org/node/1482442
  - http://drupal.org/node/1482466
  - http://drupal.org/node/1482480
  - http://drupal.org/node/1482528
  - http://secunia.com/advisories/48435
  - http://www.openwall.com/lists/oss-security/2012/04/07/1
  - http://www.osvdb.org/80080
  - http://xforce.iss.net/xforce/xfdb/74037
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/74037
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:363620
  title: '[CVE-2014-5191]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the Preview plugin before
    4.4.3 in CKEditor allows remote attackers to inject arbitrary web script or HTML
    via unspecified vectors.
  affected_package: ckeditor-dev
  vulnerable_versions:
  - "<4.4.3"
  package_manager: npm
  cve:
  - CVE-2014-5191
  disclosed_date: 2014-08-07
  created_date: 2014-08-07
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://ckeditor.com/node/136981
  - http://secunia.com/advisories/60036
  - http://www.securityfocus.com/bid/69161
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: ossindex:npm:ckeditor-dev:8405000839
  title: "`target=blank` vulnerability"
  description: "> If a victim had access to a spoofed version of ckeditor.com via
    HTTP (e.g. due to DNS spoofing, using a hacked public network or mailicious hotspot),
    then when using a link to the ckeditor.com website it was possible for the attacker
    to change the current URL of the opening page, even if the opening page was protected
    with SSL.\n> \n> -- [github.com](https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md#ckeditor-4511)"
  affected_package: ckeditor-dev
  vulnerable_versions:
  - "<4.5.11"
  package_manager: npm
  disclosed_date: 2017-07-30
  created_date: 2017-07-30
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md#ckeditor-4511
  source_url: https://ossindex.net/resource/package/7012187007/vulnerabilities
- id: snykio:npm:ckeditor-dev:20140626
  title: Cross-site Scripting (XSS)
  description: |+
    [ckeditor-dev][1] is a browser-based WYSIWYG editor. Affected versions
    of this package were vulnerable to Cross-site Scripting (XSS) attacks
    via the preview plugin. The vulnerability was found by [Mario
    Heiderich][2]



    [1]: https://www.npmjs.com/package/ckeditor-dev
    [2]: https://github.com/x00mario
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ckeditor-dev
  vulnerable_versions:
  - "<4.4.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-06-26
  created_date: 2016-09-28
  last_modified_date: 2016-09-28
  credit:
  - Mario Heiderich
  references:
  - https://github.com/ckeditor/ckeditor-dev
  - https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md#ckeditor-443
  - https://github.com/ckeditor/ckeditor-dev/commit/39c08f9fe691a98be61337127dad9e8e8141822f
  source_url: https://snyk.io/vuln/npm:ckeditor-dev:20140626
- id: snykio:npm:ckeditor-dev:20141118
  title: Cross-site Scripting (XSS)
  description: |+
    [ckeditor-dev][1] is a browser-based WYSIWYG editor. Affected versions
    of this package were vulnerable to Cross-site Scripting (XSS) attacks.
    It was possible to execute XSS inside CKEditor after persuading the
    victim to: (i) switch CKEditor to source mode, then (ii) paste a
    specially crafted HTML code, prepared by the attacker, into the opened
    CKEditor source area, and (iii) switch back to WYSIWYG mode.

    The vulnerability was found by Maco Cortes.



    [1]: https://www.npmjs.com/package/ckeditor-dev
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ckeditor-dev
  vulnerable_versions:
  - "<4.4.6"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2014-11-18
  created_date: 2016-09-26
  last_modified_date: 2016-09-26
  credit:
  - Maco Cortes
  references:
  - https://github.com/ckeditor/ckeditor-dev
  - https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md#ckeditor-446
  - https://github.com/ckeditor/ckeditor-dev/commit/39c08f9fe691a98be61337127dad9e8e8141822f
  source_url: https://snyk.io/vuln/npm:ckeditor-dev:20141118
- id: snykio:npm:ckeditor-dev:20150630
  title: Cross-site Scripting (XSS)
  description: |+
    [ckeditor-dev][1] is a browser-based WYSIWYG editor. Affected versions
    of this package were vulnerable to Cross-site Scripting (XSS) attacks
    via the HTML parser. The vulnerability was found by [Dheeraj Joshi][2]
    and [Prem Kumar][3]



    [1]: https://www.npmjs.com/package/ckeditor-dev
    [2]: https://twitter.com/dheerajhere
    [3]: https://twitter.com/iAmPr3m
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ckeditor-dev
  vulnerable_versions:
  - "<4.4.8"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-06-30
  created_date: 2016-09-23
  last_modified_date: 2016-09-23
  credit:
  - Dheeraj Joshi and Prem Kumar
  references:
  - https://github.com/ckeditor/ckeditor-dev
  - https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md#ckeditor-448
  - https://github.com/ckeditor/ckeditor-dev/commit/ccd0038ca5512dbafbb975dd7ec5444ff47f7767
  source_url: https://snyk.io/vuln/npm:ckeditor-dev:20150630
- id: snykio:npm:ckeditor-dev:20160822
  title: Cross-site Scripting (XSS)
  description: |+
    [ckeditor-dev][1] is a browser-based WYSIWYG editor. Affected versions
    of this package were vulnerable to Cross-site Scripting (XSS) attacks
    via a link\'s display test. The vulnerability was found by James Gaskell



    [1]: https://www.npmjs.com/package/ckeditor-dev
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ckeditor-dev
  vulnerable_versions:
  - "<4.5.11"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-06-26
  created_date: 2016-09-19
  last_modified_date: 2016-09-19
  credit:
  - James Gaskell
  references:
  - https://github.com/ckeditor/ckeditor-dev
  - https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md#ckeditor-4511
  - https://github.com/ckeditor/ckeditor-dev/commit/5b1f7c0da97ebcffff987da3f860dbcee7a24ad9
  source_url: https://snyk.io/vuln/npm:ckeditor-dev:20160822
- id: snykio:npm:ckeditor-dev:20180430
  title: Cross-site Scripting (XSS)
  description: |+
    [ckeditor-dev][1] is The development repository of CKEditor 4.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in the Enhanced Image (aka image2) plugin. It allows
    remote attackers to inject arbitrary web script through a crafted IMG
    element.



    [1]: https://www.npmjs.com/package/ckeditor-dev
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: ckeditor-dev
  vulnerable_versions:
  - ">=4.5.11 <4.9.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-9861
  cwe:
  - CWE-79
  disclosed_date: 2018-04-19
  created_date: 2018-05-02
  last_modified_date: 2018-05-02
  credit:
  - Kyaw Min Thein
  references:
  - https://ckeditor.com/cke4/release/CKEditor-4.9.2
  - https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md
  - https://nvd.nist.gov/vuln/detail/CVE-2018-9861
  source_url: https://snyk.io/vuln/npm:ckeditor-dev:20180430
