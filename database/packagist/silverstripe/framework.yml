---
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-12246
  title: 'CVE-2019-12246: Denial of Service on flush and development URL tools'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0 <4.4.0"
  - ">=4.1.0 <4.4.0"
  - ">=4.2.0 <4.4.0"
  - ">=4.3.0 <4.4.0"
  package_manager: packagist
  cve:
  - CVE-2019-12246
  disclosed_date: 2019-06-11
  created_date: 2019-06-11
  last_modified_date: 2019-06-11
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12246
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-12246.yaml
- id: friendsofphp:packagist:silverstripe/framework:CVE-2019-5715
  title: 'CVE-2019-5715: Reflected SQL Injection through Form and DataObject'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.6.7"
  - ">=3.7.0 <3.7.3"
  - ">=4.0.0 <4.0.7"
  - ">=4.1.0 <4.1.5"
  - ">=4.2.0 <4.2.4"
  - ">=4.3.0 <4.3.1"
  package_manager: packagist
  cve:
  - CVE-2019-5715
  disclosed_date: 2019-02-19
  created_date: 2019-02-19
  last_modified_date: 2019-02-19
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-021
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2019-5715.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2014-015-1
  title: 'SS-2014-015: IE requests not properly behaving with rewritehashlinks'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.12"
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2014-015-ie-requests-not-properly-behaving-with-rewritehashlinks/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2014-015-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2014-017-1
  title: 'SS-2014-017: XML Quadratic Blowup Attack'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2014-08-12
  created_date: 2014-08-12
  last_modified_date: 2014-08-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2014-017-xml-quadratic-blowup-attack/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2014-017-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-004-1
  title: 'SS-2015-004: TreeDropdownField and TreeMultiSelectField XSS'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.9"
  package_manager: packagist
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-004/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-004-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-006-1
  title: 'SS-2015-006: XSS In GridField print'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.10"
  package_manager: packagist
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-006/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-006-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-007-1
  title: 'SS-2015-007: XSS In FormAction'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.9"
  package_manager: packagist
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-007/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-007-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-009-1
  title: 'SS-2015-009: XSS In rewritten hash links'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.12"
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-009-xss-in-rewritten-hash-links/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-009-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-010-1
  title: 'SS-2015-010: XSS in Director::force_redirect()'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.12"
  package_manager: packagist
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-010-xss-in-directorforce-redirect/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-010-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-011-1
  title: 'SS-2015-011: Potential SQL Injection Vulnerability'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2015-05-25
  created_date: 2015-05-25
  last_modified_date: 2015-05-25
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-011/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-011-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-012-1
  title: 'SS-2015-012: External redirection risk in Security?ReturnURL'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <=3.1.12"
  package_manager: packagist
  disclosed_date: 2015-05-25
  created_date: 2015-05-25
  last_modified_date: 2015-05-25
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-012/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-012-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-013-1
  title: 'SS-2015-013: X-Forwarded-Host request hostname injection'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2015-05-29
  created_date: 2015-05-29
  last_modified_date: 2015-05-29
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-013/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-013-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-014-1
  title: 'SS-2015-014: Vulnerability on ''isDev'', ''isTest'' and ''flush'' $_GET
    validation'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2015-05-28
  created_date: 2015-05-28
  last_modified_date: 2015-05-28
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-014/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-014-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-015-1
  title: 'SS-2015-015: XSS in dev/build returnURL Parameter'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.14"
  package_manager: packagist
  disclosed_date: 2015-09-14
  created_date: 2015-09-14
  last_modified_date: 2015-09-14
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-015/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-015-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-016-1
  title: 'SS-2015-016: XSS in install.php'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.14"
  package_manager: packagist
  disclosed_date: 2015-09-14
  created_date: 2015-09-14
  last_modified_date: 2015-09-14
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/software/download/security-releases/ss-2015-016/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-016-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-026-1
  title: 'SS-2015-026: Form field validation message XSS vulnerability'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.1.0"
  - ">=3.1.0 <3.1.16"
  - ">=3.2.0 <3.2.1"
  package_manager: packagist
  disclosed_date: 2015-11-11
  created_date: 2015-11-11
  last_modified_date: 2015-11-11
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2015-026/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-026-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-027-1
  title: 'SS-2015-027: HtmlEditor embed url sanitisation'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.1.0"
  - ">=3.1.0 <3.2.0"
  - ">=3.2.0 <3.2.1"
  package_manager: packagist
  disclosed_date: 2015-11-13
  created_date: 2015-11-13
  last_modified_date: 2015-11-13
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2015-027/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-027-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2015-028-1
  title: 'SS-2015-028: Missing security check on dev/build/defaults'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-02-17
  created_date: 2016-02-17
  last_modified_date: 2016-02-17
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2015-028/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-028-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-002-1
  title: 'SS-2016-002: CSRF vulnerability in GridFieldAddExistingAutocompleter'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-02-17
  created_date: 2016-02-17
  last_modified_date: 2016-02-17
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-002/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-002-1.yaml
- id: friendsofphp:packagist:silverstripe/framework:SS-2016-003-1
  title: 'SS-2016-003: Hostname, IP and Protocol Spoofing through HTTP Headers'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-02-18
  created_date: 2016-02-18
  last_modified_date: 2016-02-18
  credit:
  - FriendsOfPHP
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2016-003/
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-003-1.yaml
- id: ossindex:packagist:silverstripe/framework:8399183280
  title: '"SS-2014-015: IE requests not properly behaving with rewritehashlinks"'
  description: '"SS-2014-015: IE requests not properly behaving with rewritehashlinks"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.12"
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2014-015-ie-requests-not-properly-behaving-with-rewritehashlinks/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2014-015-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183281
  title: '"SS-2014-017: XML Quadratic Blowup Attack"'
  description: '"SS-2014-017: XML Quadratic Blowup Attack"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2014-017-xml-quadratic-blowup-attack/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2014-017-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183282
  title: '"SS-2015-004: TreeDropdownField and TreeMultiSelectField XSS"'
  description: '"SS-2015-004: TreeDropdownField and TreeMultiSelectField XSS"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.9"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-004/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-004-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183283
  title: '"SS-2015-006: XSS In GridField print"'
  description: '"SS-2015-006: XSS In GridField print"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.10"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-006/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-006-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183284
  title: '"SS-2015-007: XSS In FormAction"'
  description: '"SS-2015-007: XSS In FormAction"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <=3.1.9"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-007/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-007-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183285
  title: '"SS-2015-009: XSS In rewritten hash links"'
  description: '"SS-2015-009: XSS In rewritten hash links"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.12"
  - ">=3.1.0 <=3.1.11"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-009-xss-in-rewritten-hash-links/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-009-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183286
  title: '"SS-2015-010: XSS in Director::force_redirect()"'
  description: '"SS-2015-010: XSS in Director::force_redirect()"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.12"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-010-xss-in-directorforce-redirect/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-010-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183287
  title: '"SS-2015-011: Potential SQL Injection Vulnerability"'
  description: '"SS-2015-011: Potential SQL Injection Vulnerability"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-011/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-011-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183288
  title: '"SS-2015-012: External redirection risk in Security?ReturnURL"'
  description: '"SS-2015-012: External redirection risk in Security?ReturnURL"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <=3.1.12"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-012/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-012-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183289
  title: '"SS-2015-013: X-Forwarded-Host request hostname injection"'
  description: '"SS-2015-013: X-Forwarded-Host request hostname injection"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-013/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-013-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183290
  title: '"SS-2015-014: Vulnerability on ''isDev'', ''isTest'' and ''flush'' $_GET
    validation"'
  description: '"SS-2015-014: Vulnerability on ''isDev'', ''isTest'' and ''flush''
    $_GET validation"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <=3.0.13"
  - ">=3.1.0 <3.1.13"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-014/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-014-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183291
  title: '"SS-2015-015: XSS in dev/build returnURL Parameter"'
  description: '"SS-2015-015: XSS in dev/build returnURL Parameter"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.14"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-015/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-015-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183292
  title: '"SS-2015-016: XSS in install.php"'
  description: '"SS-2015-016: XSS in install.php"'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.1.0 <3.1.14"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-016/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-016-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183293
  title: 'SS-2015-026: Form field validation message XSS vulnerability'
  description: 'SS-2015-026: Form field validation message XSS vulnerability'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.1.0"
  - ">=3.1.0 <3.1.16"
  - ">=3.2.0 <3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-026/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-026-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183294
  title: 'SS-2015-027: HtmlEditor embed url sanitisation'
  description: 'SS-2015-027: HtmlEditor embed url sanitisation'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.0.0 <3.1.0"
  - ">=3.1.0 <3.2.0"
  - ">=3.2.0 <3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-027/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-027-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183295
  title: 'SS-2015-028: Missing security check on dev/build/defaults'
  description: 'SS-2015-028: Missing security check on dev/build/defaults'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-028/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-028-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183296
  title: 'SS-2016-002: CSRF vulnerability in GridFieldAddExistingAutocompleter'
  description: 'SS-2016-002: CSRF vulnerability in GridFieldAddExistingAutocompleter'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2016-002/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-002-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: ossindex:packagist:silverstripe/framework:8399183297
  title: 'SS-2016-003: Hostname, IP and Protocol Spoofing through HTTP Headers'
  description: 'SS-2016-003: Hostname, IP and Protocol Spoofing through HTTP Headers'
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">3.2 <3.3.0"
  - ">=3.1.0 <=3.1.16"
  - ">=3.2.0 <=3.2.1"
  package_manager: packagist
  disclosed_date: 2016-06-05
  created_date: 2016-06-05
  last_modified_date: 2016-06-05
  credit:
  - OSSIndex
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2016-003/
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2016-003-1.yaml
  source_url: https://ossindex.net/resource/package/8397594290/vulnerabilities
- id: snykio:packagist:silverstripe/framework:173709
  title: SQL Injection
  description: |
    [silverstripe/framework][1] is PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to SQL Injection via
    `Form` and `DataObject` when a specifically crafted user input is
    executed as `SQL SELECT` statements in the process of writing this input
    to a database record. It requires a specific `SilverStripe`
    implementation to accept user input for this purpose.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.6.0  <3.6.7"
  - ">=3.7.0  <3.7.3"
  - ">=4.0.0  <4.0.7"
  - ">=4.1.0  <4.1.5"
  - ">=4.2.0  <4.2.4"
  - ">=4.3.0  <4.3.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-5715
  cwe:
  - CWE-89
  disclosed_date: 2019-02-19
  created_date: 2019-02-19
  last_modified_date: 2019-02-19
  credit:
  - James Turner
  references:
  - https://www.silverstripe.org/download/security-releases/ss-2018-021/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-173709
- id: snykio:packagist:silverstripe/framework:449594
  title: Cross-Site Request Forgery (CSRF)
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Cross-Site Request
    Forgery (CSRF). The Cross Site Request Forgery protection for GraphQL
    mutation queries does not adequately protect against CSRF attacks on
    GraphQL endpoints. When a GraphQL query is formed with a fragment
    portion, it needs to check whether the query is a mutation and, so the
    `X-CSRF-TOKEN` header, the token header that is required for the CSRF
    protection module, is not required with the HTTP request and therefore
    is able to bypass the CSRF protection.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.0.0  <4.4.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12246
  cwe:
  - CWE-352
  disclosed_date: 2019-06-10
  created_date: 2019-06-11
  last_modified_date: 2019-06-11
  credit:
  - Unknown
  references:
  - https://www.silverstripe.org/download/security-releases/cve-2019-12246
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-449594
- id: snykio:packagist:silverstripe/framework:469154
  title: Session Fixation
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Session Fixation.
    Session Fixation possible in the \"change password\" form. A potential
    account hijacking may happen if an attacker has physical access to
    victim\'s computer to perform session fixation.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=3.6.0  <3.6.8"
  - ">=3.7.0  <3.7.4"
  - ">=4.3.0  <4.3.6"
  - ">=4.4.0  <4.4.4"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2019-12203
  cwe:
  - CWE-384
  disclosed_date: 2019-09-25
  created_date: 2019-09-25
  last_modified_date: 2019-09-25
  credit:
  - Unknown
  references:
  - https://github.com/silverstripe/silverstripe-framework/commit/eccfa9b10d246d741de2fa83d502339d45068983
  - https://www.silverstripe.org/download/security-releases/CVE-2019-12203
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-469154
- id: snykio:packagist:silverstripe/framework:469155
  title: Incorrect Access Control
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Incorrect Access
    Control. None



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.1.0  <4.3.6"
  - ">=4.4.0  <4.4.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-12204
  cwe:
  - CWE-284
  disclosed_date: 2019-09-24
  created_date: 2019-09-26
  last_modified_date: 2019-09-26
  credit:
  - Steve Boyd
  references:
  - https://github.com/silverstripe/silverstripe-cms/commit/f98a59deb58d3c9c739f5b32de16472f6ef4a69c
  - https://www.silverstripe.org/download/security-releases/CVE-2019-12204
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-469155
- id: snykio:packagist:silverstripe/framework:469236
  title: Improper Access Control
  description: |
    [silverstripe/framework][1] is a PHP framework forming the base for the
    SilverStripe CMS.

    Affected versions of this package are vulnerable to Improper Access
    Control. Access escalation is possible for CMS users with limited access
    through permission cache pollution.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - ">=4.3.0  <4.3.6"
  - ">=4.4.0  <4.4.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-12617
  cwe:
  - CWE-284
  disclosed_date: 2019-09-26
  created_date: 2019-09-26
  last_modified_date: 2019-09-26
  credit:
  - Serge Latyntcev
  references:
  - https://github.com/silverstripe/silverstripe-framework/commit/8b7063a8e2773e2bbec3cabf94ed86e11f607071
  - https://www.silverstripe.org/download/security-releases/CVE-2019-12617
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-469236
- id: snykio:packagist:silverstripe/framework:70140
  title: Arbitrary Code Injection
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Arbitrary Code Injection.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.13"
  - ">=3.1.0  <3.1.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2014-015-ie-requests-not-properly-behaving-with-rewritehashlinks/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70140
- id: snykio:packagist:silverstripe/framework:70141
  title: Quadratic Blowup Attack
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Quadratic Blowup Attack.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.12"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-400
  disclosed_date: 2014-08-12
  created_date: 2014-08-12
  last_modified_date: 2014-08-12
  credit:
  - Jamie Totten
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2014-017-xml-quadratic-blowup-attack/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70141
- id: snykio:packagist:silverstripe/framework:70142
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.10"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-004/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70142
- id: snykio:packagist:silverstripe/framework:70143
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.10"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-006/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70143
- id: snykio:packagist:silverstripe/framework:70144
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.10"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-02-12
  created_date: 2015-02-12
  last_modified_date: 2015-02-12
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70144
- id: snykio:packagist:silverstripe/framework:70145
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.13"
  - ">=3.1.0  <3.1.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-009-xss-in-rewritten-hash-links/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70145
- id: snykio:packagist:silverstripe/framework:70146
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-03-20
  created_date: 2015-03-20
  last_modified_date: 2015-03-20
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-010-xss-in-directorforce-redirect/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70146
- id: snykio:packagist:silverstripe/framework:70147
  title: SQL Injection
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to SQL
    Injection.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.14"
  - ">=3.1.0  <3.1.13"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-89
  disclosed_date: 2015-05-25
  created_date: 2015-05-25
  last_modified_date: 2015-05-25
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-011/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70147
- id: snykio:packagist:silverstripe/framework:70148
  title: Open Redirect
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Open Redirect.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.14"
  - ">=3.1.0  <3.1.13"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-601
  disclosed_date: 2015-05-25
  created_date: 2015-05-25
  last_modified_date: 2015-05-25
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-012/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70148
- id: snykio:packagist:silverstripe/framework:70149
  title: HTTP Hostname Injection
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    HTTP Hostname Injection.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.13"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-74
  disclosed_date: 2015-05-29
  created_date: 2015-05-29
  last_modified_date: 2015-05-29
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-013/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70149
- id: snykio:packagist:silverstripe/framework:70150
  title: Access Restriction Bypass
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Access Restriction Bypass.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.0.14"
  - ">=3.1.0  <3.1.13"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2015-05-28
  created_date: 2015-05-28
  last_modified_date: 2015-05-28
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-014/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70150
- id: snykio:packagist:silverstripe/framework:70151
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.14"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-09-14
  created_date: 2015-09-14
  last_modified_date: 2015-09-14
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-015/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70151
- id: snykio:packagist:silverstripe/framework:70152
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.14"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-09-14
  created_date: 2015-09-14
  last_modified_date: 2015-09-14
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/software/download/security-releases/ss-2015-016/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70152
- id: snykio:packagist:silverstripe/framework:70153
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.16"
  - ">=3.2.0  <3.2.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-11-11
  created_date: 2015-11-11
  last_modified_date: 2015-11-11
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-026/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70153
- id: snykio:packagist:silverstripe/framework:70154
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/silverstripe/framework
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.2.1"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2015-11-13
  created_date: 2015-11-13
  last_modified_date: 2015-11-13
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-027/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70154
- id: snykio:packagist:silverstripe/framework:70155
  title: Access Restriction Bypass
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Access Restriction Bypass.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.17"
  - ">=3.2.0  <3.2.2"
  - ">=3.3-alpha  <3.3.0"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-284
  disclosed_date: 2016-02-17
  created_date: 2016-02-17
  last_modified_date: 2016-02-17
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2015-028/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70155
- id: snykio:packagist:silverstripe/framework:70156
  title: Cross-site Request Forgery (CSRF)
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    Cross-site Request Forgery (CSRF).



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.17"
  - ">=3.2.0  <3.2.2"
  - ">=3.3-alpha  <3.3.0"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-352
  disclosed_date: 2016-02-17
  created_date: 2016-02-17
  last_modified_date: 2016-02-17
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2016-002/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70156
- id: snykio:packagist:silverstripe/framework:70157
  title: IP and Protocol Spoofing
  description: |
    Affected versions of [`silverstripe/framework`][1] are vulnerable to
    SS-2016-003: Hostname, IP and Protocol Spoofing through HTTP Headers.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<3.1.17"
  - ">=3.2.0  <3.2.2"
  - ">=3.3-alpha  <3.3.0"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-290
  disclosed_date: 2016-02-18
  created_date: 2016-02-18
  last_modified_date: 2016-02-18
  credit:
  - Unknown
  references:
  - http://www.silverstripe.org/download/security-releases/ss-2016-003/
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-70157
- id: snykio:packagist:silverstripe/framework:72209
  title: Access Restriction Bypass
  description: |
    [silverstripe/framework][1] is The SilverStripe framework.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. It uses weak entropy when generating tokens for the CSRF
    protection mechanism.



    [1]: https://packagist.org/packages/silverstripe/framework
  affected_package: silverstripe/framework
  vulnerable_versions:
  - "<2.3.10"
  - ">=2.4.0  <2.4.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2010-5079
  cwe:
  - CWE-310
  disclosed_date: 2010-09-17
  created_date: 2018-06-17
  last_modified_date: 2018-06-17
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2010-5079
  source_url: https://snyk.io/vuln/SNYK-PHP-SILVERSTRIPEFRAMEWORK-72209
