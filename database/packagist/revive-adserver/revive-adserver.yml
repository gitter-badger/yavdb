---
- id: snykio:packagist:revive-adserver/revive-adserver:174592
  title: Deserialization of Untrusted Data
  description: |
    [revive-adserver/revive-adserver][1] is a free, open source ad server
    system.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. An attacker could send a specifically crafted payload to
    the XML-RPC invocation script and trigger the `unserialize()` call on
    the `what` parameter in the `openads.spc` RPC method. Such vulnerability
    could be used to perform various types of attacks, e.g. exploit
    serialize-related PHP vulnerabilities or PHP object injection.

    It is possible, although unconfirmed, that the vulnerability has been
    used by some attackers in order to gain access to some Revive Adserver
    instances and deliver malware through them to third party websites.

    \##Details Serialization is a process of converting an object into a
    sequence of bytes which can be persisted to a disk or database or can be
    sent through streams. The reverse process of creating object from
    sequence of bytes is called deserialization. Serialization is commonly
    used for communication (sharing objects between multiple hosts) and
    persistence (store the object state in a file or a database). It is an
    integral part of popular protocols like *Remote Method Invocation
    (RMI)*, *Java Management Extension (JMX)*, *Java Messaging System
    (JMS)*, *Action Message Format (AMF)*, *Java Server Faces (JSF)
    ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][2]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    Java deserialization issues have been known for years. However, interest
    in the issue intensified greatly in 2015, when classes that could be
    abused to achieve remote code execution were found in a [popular library
    (Apache Commons Collection)][3]. These classes were used in zero-days
    affecting IBM WebSphere, Oracle WebLogic and many other products.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.

    > Developers put too much trust in Java Object Serialization. Some even
    > de-serialize objects pre-authentication. When deserializing an Object
    > in Java you typically cast it to an expected type, and therefore
    > Java\'s strict type system will ensure you only get valid object
    > trees. Unfortunately, by the time the type checking happens, platform
    > code has already created and executed significant logic. So, before
    > the final type is checked a lot of code is executed from the
    > readObject() methods of various objects, all of which is out of the
    > developer\'s control. By combining the readObject() methods of various
    > classes which are available on the classpath of the vulnerable
    > application an attacker can execute functions (including calling
    > Runtime.exec() to execute local OS commands).

    * Apache Blog

    The vulnerability, also know as *Mad Gadget*

    > Mad Gadget is one of the most pernicious vulnerabilities we’ve seen.
    > By merely existing on the Java classpath, seven “gadget” classes in
    > Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)
    > make object deserialization for the entire JVM process Turing complete
    > with an exec function. Since many business applications use object
    > deserialization to send messages across the network, it would be like
    > hiring a bank teller who was trained to hand over all the money in the
    > vault if asked to do so politely, and then entrusting that teller with
    > the key. The only thing that would keep a bank safe in such a
    > circumstance is that most people wouldn’t consider asking such a
    > question.

    * Google



    [1]: https://www.revive-adserver.com/
    [2]: https://cwe.mitre.org/data/definitions/502.html
    [3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078
  affected_package: revive-adserver/revive-adserver
  vulnerable_versions:
  - "<4.2.0"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-5434
  cwe:
  - CWE-502
  disclosed_date: 2019-05-06
  created_date: 2019-05-06
  last_modified_date: 2019-05-06
  credit:
  - Matteo Beccati
  references:
  - https://hackerone.com/reports/512076
  - https://hackerone.com/reports/542670
  - https://www.exploit-db.com/exploits/47739
  - https://www.revive-adserver.com/security/revive-sa-2019-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-REVIVEADSERVERREVIVEADSERVER-174592
- id: snykio:packagist:revive-adserver/revive-adserver:174600
  title: Open Redirect
  description: |
    [revive-adserver/revive-adserver][1] is a free, open source ad server
    system.

    Affected versions of this package are vulnerable to Open Redirect. Input
    passed via the `return_url` GET parameter to
    `/www/admin/account-switch.php` script is not properly sanitised and
    used to redirect the user to the target page. A remote attacker can
    trick logged-in user to open a specially crafted link and have them
    redirected to any destination.

    A user having access to the UI of a Revive Adserver instance could also
    be tricked into clicking on a specifically crafted `admin
    account-switch.php` URL that would eventually lead them to another
    (unsafe) domain, potentially used for stealing credentials or other
    phishing attacks.



    [1]: https://www.revive-adserver.com/
  affected_package: revive-adserver/revive-adserver
  vulnerable_versions:
  - "<4.2.0"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2019-5433
  cwe:
  - CWE-601
  disclosed_date: 2019-05-06
  created_date: 2019-05-06
  last_modified_date: 2019-05-06
  credit:
  - sumni
  references:
  - https://hackerone.com/reports/390663
  - https://www.revive-adserver.com/security/revive-sa-2019-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-REVIVEADSERVERREVIVEADSERVER-174600
