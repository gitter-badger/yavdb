---
- id: ossindex:pypi:python-cjson:339267
  title: '[CVE-2009-4924]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Dan Pascu python-cjson 1.0.5 does not properly handle a ['/'] argument
    to cjson.encode, which makes it easier for remote attackers to conduct certain
    cross-site scripting (XSS) attacks involving Firefox and the end tag of a SCRIPT
    element.
  affected_package: python-cjson
  vulnerable_versions:
  - 1.0.5
  package_manager: pypi
  cve:
  - CVE-2009-4924
  disclosed_date: 2010-07-02
  created_date: 2010-07-02
  last_modified_date: 2017-04-12
  credit:
  - OSSIndex
  references:
  - http://pypi.python.org/pypi/python-cjson/
  - http://t3.dotgnu.info/blog/insecurity/quotes-dont-help.html
  source_url: https://ossindex.net/resource/package/8401234890/vulnerabilities
- id: ossindex:pypi:python-cjson:341068
  title: "[CVE-2010-1666]  Improper Restriction of Operations within the Bounds of
    a Memory Buffer"
  description: Buffer overflow in Dan Pascu python-cjson 1.0.5, when UCS-4 encoding
    is enabled, allows context-dependent attackers to cause a denial of service (application
    crash) or possibly have unspecified other impact via vectors involving crafted
    Unicode input to the cjson.encode function.
  affected_package: python-cjson
  vulnerable_versions:
  - 1.0.5
  package_manager: pypi
  cve:
  - CVE-2010-1666
  disclosed_date: 2010-07-02
  created_date: 2010-07-02
  last_modified_date: 2017-04-12
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/40335
  - http://secunia.com/advisories/40500
  - http://www.debian.org/security/2010/dsa-2068
  - http://www.vupen.com/english/advisories/2010/1774
  - https://bugs.launchpad.net/ubuntu/%20source/python-cjson/%20bug/585274
  - https://bugs.launchpad.net/ubuntu/+source/python-cjson/+bug/585274
  source_url: https://ossindex.net/resource/package/8401234890/vulnerabilities
- id: snykio:pypi:python-cjson:40046
  title: Denial of Service (DoS)
  description: |+
    [`python-cjson`][1] is a Fast JSON encoder/decoder for Python.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. Buffer overflow in Dan Pascu python-cjson 1.0.5, when
    UCS-4 encoding is enabled, allows context-dependent attackers to cause a
    denial of service (application crash) or possibly have unspecified other
    impact via vectors involving crafted Unicode input to the cjson.encode
    function.



    [1]: https://pypi.python.org/pypi/python-cjson
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: python-cjson
  vulnerable_versions:
  - ">= 1.0.0 < 1.0.5.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-1666
  cwe:
  - CWE-400
  disclosed_date: 2010-07-02
  created_date: 2010-07-11
  last_modified_date: 2010-07-11
  credit:
  - Matt Giuca
  references:
  - https://github.com/AGProjects/python-cjson/commit/dc2b8781b8666de5ca707318521f554904fdd690
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-1666
  source_url: https://snyk.io/vuln/SNYK-PYTHON-PYTHONCJSON-40046
- id: snykio:pypi:python-cjson:40752
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`python-cjson`][1] are vulnerable to Cross-Site
    Scripting (XSS) attacks.

    Dan Pascu python-cjson 1.0.5 does not properly handle a \[\'/\'\]
    argument to cjson.encode, which makes it easier for remote attackers to
    conduct certain cross-site scripting (XSS) attacks involving Firefox and
    the end tag of a SCRIPT element.



    [1]: https://pypi.python.org/pypi/python-cjson
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: python-cjson
  vulnerable_versions:
  - "<= 1.0.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2009-4924
  cwe:
  - CWE-79
  disclosed_date: 2010-07-02
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2009-4924
  source_url: https://snyk.io/vuln/SNYK-PYTHON-PYTHONCJSON-40752
