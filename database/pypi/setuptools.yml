---
- id: ossindex:pypi:setuptools:355383
  title: "[CVE-2013-1633]  Improper Input Validation"
  description: easy_install in setuptools before 0.7 uses HTTP to retrieve packages
    from the PyPI repository, and does not perform integrity checks on package contents,
    which allows man-in-the-middle attackers to execute arbitrary code via a crafted
    response to the default use of the product.
  affected_package: setuptools
  vulnerable_versions:
  - 0.6.40
  - 0.6.41
  - 0.6.42
  - 0.6.43
  - 0.6.44
  - 0.6.45
  - 0.6.46
  - 0.6.47
  - 0.6.48
  - 0.6.49
  - 0.7b4
  package_manager: pypi
  cve:
  - CVE-2013-1633
  disclosed_date: 2013-08-06
  created_date: 2013-08-06
  last_modified_date: 2017-04-12
  credit:
  - OSSIndex
  references:
  - http://www.reddit.com/r/Python/comments/17rfh7/warning_dont_use_pip_in_an_untrusted_network_a/
  - https://pypi.python.org/pypi/setuptools/0.9.8#changes
  source_url: https://ossindex.net/resource/package/8401294465/vulnerabilities
- id: ossindex:pypi:setuptools:8402792686
  title: Path Traversal in package_data
  description: This package allows the inclusion of arbitrary files from outside the
    package root to be included in the install, which might include sensitive files.
  affected_package: setuptools
  vulnerable_versions:
  - ">=0"
  package_manager: pypi
  disclosed_date: 2017-04-14
  created_date: 2017-04-14
  last_modified_date: 2017-04-16
  credit:
  - OSSIndex
  references:
  - https://github.com/pypa/setuptools/issues/227
  source_url: https://ossindex.net/resource/package/8401294465/vulnerabilities
- id: snykio:pypi:setuptools:40178
  title: Arbitrary Code Execution
  description: |
    [`setuptools`][1] is a Easily download, build, install, upgrade, and
    uninstall Python packages easy\_install in setuptools before 0.7 uses
    HTTP to retrieve packages from the PyPI repository, and does not perform
    integrity checks on package contents, which allows man-in-the-middle
    attackers to execute arbitrary code via a crafted response to the
    default use of the product.



    [1]: https://pypi.python.org/pypi/setuptools
  affected_package: setuptools
  vulnerable_versions:
  - "< 0.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-1633
  cwe:
  - CWE-20
  disclosed_date: 2013-08-06
  created_date: 2016-02-24
  last_modified_date: 2016-02-24
  credit:
  - Unknown
  references:
  - http://www.reddit.com/r/Python/comments/17rfh7/warning_dont_use_pip_in_an_untrusted_network_a
  - https://pypi.python.org/pypi/setuptools/0.9.8#changes
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1633
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SETUPTOOLS-40178
- id: snykio:pypi:setuptools:40727
  title: Denial of Service (DoS)
  description: |+
    Affected versions of [`setuptools`][1] are vulnerable to Denial of
    Service (DoS) attacks.

    Algorithmic complexity vulnerability in the ssl.match\_hostname
    function, allows remote attackers to cause a denial of service (CPU
    consumption) via multiple wildcard characters in the common name in a
    certificate.(same issue as CVE-2013-2099).



    [1]: https://pypi.python.org/pypi/setuptools
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: setuptools
  vulnerable_versions:
  - "< 0.9.5"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-399
  disclosed_date: 2017-11-05
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://bugs.python.org/issue17980
  - https://github.com/pypa/setuptools/blob/master/CHANGES.rst#095
  - https://github.com/pypa/setuptools/commit/7ddd872c63a9465340eadae59868d85ac1d43e67
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SETUPTOOLS-40727
- id: snykio:pypi:setuptools:40728
  title: Man-in-the-Middle (MitM)
  description: |
    Affected versions of [`setuptools`][1] are vulnerable to
    Man-in-the-Middle (MitM) attack.

    The ssl.match\_hostname function does not properly handle wildcards in
    hostnames, which might allow man-in-the-middle attackers to spoof
    servers via a crafted certificate. (same as CVE-2013-7440).



    [1]: https://pypi.python.org/pypi/setuptools
  affected_package: setuptools
  vulnerable_versions:
  - "< 1.3"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-19
  disclosed_date: 2013-10-28
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://bugs.python.org/issue17997
  - https://github.com/pypa/setuptools/blob/master/CHANGES.rst#13
  - https://github.com/pypa/setuptools/commit/38fcb3e366ee7a21ff5f0f550fe190b1326fc04b
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SETUPTOOLS-40728
- id: snykio:pypi:setuptools:40729
  title: Directory Traversal
  description: |
    Affected versions of [`setuptools`][1] are vulnerable to Directory
    Traversal.

    `ez_setup._extractall()` doesn\'t validate the tar file members.
    `member.name` can start with `/` or to contain `/` which malicious
    attacker can exploit to Directory Traversal attacks.



    [1]: https://pypi.python.org/pypi/setuptools
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: setuptools
  vulnerable_versions:
  - "< 3.0"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-22
  disclosed_date: 2013-06-03
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Christian Heimes
  references:
  - https://github.com/pypa/setuptools/blob/master/CHANGES.rst#30
  - https://github.com/pypa/setuptools/commit/4c7aaccacb0a756f45862826025bfdd579195d1e
  - https://github.com/pypa/setuptools/issues/7
  source_url: https://snyk.io/vuln/SNYK-PYTHON-SETUPTOOLS-40729
